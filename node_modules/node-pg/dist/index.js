"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var pg = require("pg-promise");
module.exports = (function () {
    var consoleX = require('console-x');
    var objectX = require('object-x');
    var to = require('to-case');
    var type = require('type-detect');
    var pluralize = require('pluralize');
    var bluebird = require('bluebird');
    var cloneToCase = require('clone-to-case');
    var isNil = require("is-nil");
    var hasValue = function (x) { return !isNil(x); };
    var Ctx = (function () {
        function Ctx(connection) {
            this.postgre = pg.pgPromise({
                promiseLib: bluebird // overriding the default (ES6 Promise);
            });
            this.db = this.postgre(connection);
        }
        Ctx.prototype.tableName = function (entity) {
            return entity; // pluralize(entity);
            //return pluralize(entity) + "_tbl";
        };
        Ctx.prototype.fieldName = function (field) {
            return to.snake(field);
        };
        /*
         * Select database objects from the <entity> table,
         * filtered according to the <filter> template object
         */
        Ctx.prototype.selectAsync = function (entity, filter) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var keys, whereClause, stmt, data, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keys = !isNil(filter) ? Object.keys(filter) : [];
                            whereClause = keys.length > 0
                                ? (' where ' + keys.map(function (key, index) { return _this.fieldName(key) + "=$" + (index + 1); }).join(' and '))
                                : ('');
                            stmt = "select * from " + this.tableName(entity) + whereClause;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, this.db.any(stmt, keys.map(function (key) { return filter[key]; }))
                                //if (data.length === 0) 
                                //    consoleX.warn(`select(): no data found for query "${stmt}"`);
                            ];
                        case 2:
                            data = _a.sent();
                            //if (data.length === 0) 
                            //    consoleX.warn(`select(): no data found for query "${stmt}"`);
                            return [2 /*return*/, data.map(function (datum) { return cloneToCase(datum, "camel"); })];
                        case 3:
                            err_1 = _a.sent();
                            throw err_1;
                        case 4:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ;
        /*
         * Inserts database object corresponding to obj arg into <entity> table and returns updated object
         */
        Ctx.prototype.insertAsync = function (entity, obj) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var keys, fieldsClause, valuesClause, stmt, datum, err_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keys = Object.keys(obj);
                            fieldsClause = keys.map(function (key) { return _this.fieldName(key); }).join(',');
                            valuesClause = keys.map(function (key, index) { return "$" + (index + 1); }).join(', ');
                            stmt = "insert into " + entity + " (" + fieldsClause + ") values (" + valuesClause + ") returning id";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, this.db.one({
                                    text: stmt,
                                    values: keys.map(function (key) { return obj[key]; })
                                })];
                        case 2:
                            datum = _a.sent();
                            return [2 /*return*/, datum];
                        case 3:
                            err_2 = _a.sent();
                            throw new Error("Error inserting " + objectX.stringify(obj) + " into " + entity + ": " + err_2);
                        case 4:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        ;
        /*
         * Updates database object corresponding to obj argument in <entity> table and returns updated object
         */
        Ctx.prototype.updateAsync = function (entity, obj) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var keys, assignmentsClause, stmt, datum, err_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keys = Object.keys(obj);
                            assignmentsClause = keys
                                .filter(function (key) { return key != "id"; })
                                .map(function (key, index) { return _this.fieldName(key) + " = $" + (index + 1); }).join(', ');
                            stmt = "update " + entity + " set " + assignmentsClause + " where id=$" + keys.length + " returning id";
                            consoleX.notify("generated update sql to be executed: \"" + stmt + "\", with parameters " + keys.map(function (key) { return obj[key]; }));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            return [4 /*yield*/, this.db.one({
                                    text: stmt,
                                    values: keys.map(function (key) { return obj[key]; })
                                })];
                        case 2:
                            datum = _a.sent();
                            return [2 /*return*/, datum];
                        case 3:
                            err_3 = _a.sent();
                            throw new Error("Error updating " + entity + " " + objectX.stringify(obj) + ": " + err_3);
                        case 4:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /*
         * Inserts or updates db object (depending on id value) corresponding to obj argument and returns updated object
         */
        Ctx.prototype.saveAsync = function (entity, obj) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (isNil(obj.id)) {
                        return [2 /*return*/, this.insertAsync(entity, obj)];
                    }
                    else {
                        return [2 /*return*/, this.updateAsync(entity, obj)];
                    }
                    return [2 /*return*/];
                });
            });
        };
        ;
        /*
         * Deletes database objects from the <entity> table,
         * filtered according to the <filter> template object
         */
        Ctx.prototype.deleteAsync = function (entity, filter) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                var keys, whereClause, stmt, err_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            keys = hasValue(filter)
                                ? Object.keys(filter)
                                : [];
                            whereClause = keys.length > 0
                                ? (' where ' + keys.map(function (key, index) { return _this.fieldName(key) + "=$" + (index + 1); }).join(' and '))
                                : ('');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            stmt = "delete from " + this.tableName(entity) + whereClause;
                            //consoleX.warn(`delete sql to be executed: "${stmt}"`);
                            return [4 /*yield*/, this.db.any(stmt, keys.map(function (key) { return filter[key]; }))];
                        case 2:
                            //consoleX.warn(`delete sql to be executed: "${stmt}"`);
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            err_4 = _a.sent();
                            throw err_4;
                        case 4:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        Ctx.prototype.execProcedureAsync = function (procedureName, argsArray) {
            return __awaiter(this, void 0, void 0, function () {
                var data, err_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            return [4 /*yield*/, this.db.func(procedureName, argsArray)];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data.map(function (datum) { return cloneToCase(datum, "camel"); })];
                        case 2:
                            err_5 = _a.sent();
                            throw new Error("Error executing stored procedure \"" + procedureName + "\": " + err_5);
                        case 3:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 4:
                            ;
                            return [2 /*return*/];
                    }
                });
            });
        };
        Ctx.prototype.execSqlAsync = function (sql) {
            return __awaiter(this, void 0, void 0, function () {
                var data, err_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, 3, 4]);
                            return [4 /*yield*/, this.db.any(sql)];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data.map(function (datum) { return cloneToCase(datum, "camel"); })];
                        case 2:
                            err_6 = _a.sent();
                            throw new Error("Error executing sql \"" + sql + "\": " + err_6);
                        case 3:
                            this.postgre.end();
                            return [7 /*endfinally*/];
                        case 4:
                            ;
                            return [2 /*return*/];
                    }
                });
            });
        };
        return Ctx;
    }());
    return Ctx;
})();
